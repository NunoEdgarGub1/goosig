'use strict';

/* eslint camelcase: "off" */
/* eslint max-len: "off" */

const assert = require('bsert');
const {umod} = require('./bigmath');
const util = require('./util');

function gen_RSA_group_obj(n, g, h) {
  assert(typeof n === 'bigint');
  assert(typeof g === 'bigint');
  assert(typeof h === 'bigint');
  return { modulus: n, g, h };
}

// find a member of the class group of discriminant disc with a=a
function gen_CG_elm(a, disc) {
  assert(typeof a === 'bigint');
  assert(typeof disc === 'bigint');

  const a4 = 4n * a;

  for (let b = 0n; b < a + 1n; b++) {
    const bsqD = b * b - disc;

    if (umod(bsqD, a4) === 0n)
      return [a, b, bsqD / a4];
  }

  return null;
}

function gen_CG_group_obj(disc) {
  assert(typeof disc === 'bigint');

  if (disc >= 0n || umod(disc, 4n) !== 1n)
    return null;

  const id = gen_CG_elm(1n, disc);

  let g = null;
  let h = null;
  let ga = 2n;

  for (; ga < 1000n; ga++) {
    g = gen_CG_elm(ga, disc);

    if (g != null)
      break;
  }

  let ha = ga + 1n;

  for (; ha < 1000n; ha++) {
    h = gen_CG_elm(ha, disc);

    if (h != null)
      break;
  }

  if (g == null || h == null)
    return null;

  let L = util.isqrt(util.isqrt(-disc));

  while ((L + 1n) ** 4n < -disc)
    L += 1n;

  return { disc, g, h, id, L };
}

exports.gen_RSA_group_obj = gen_RSA_group_obj;
exports.gen_CG_elm = gen_CG_elm;
exports.gen_CG_group_obj = gen_CG_group_obj;

// this modulus is the RSA-2048 challenge number
exports.Grsa2048 = gen_RSA_group_obj(25195908475657893494027183240048398571429282126204032027777137836043662020707595556264018525880784406918290641249515082189298559149176184502808489120072844992687392807287776735971418347270261896375014971824691165077613379859095700097330459748808428401797429100642458691817195118746121515172654632282216869987549182422433637259085141865462043576798423387184774447920739934236584823824281198163815010674810451660377306056201619676256133844143603833904414952634432190114657544454178424020924616515723350778707749817125772467962926386356373289912154831438167899885040445364023527381951378636564391212010397122822120720357n, 2n, 3n);

// this modulus is the RSA-617 (also 2048-bit) challenge number)
exports.Grsa617 = gen_RSA_group_obj(22701801293785014193580405120204586741061235962766583907094021879215171483119139894870133091111044901683400949483846818299518041763507948922590774925466088171879259465921026597046700449819899096862039460017743094473811056991294128542891880855362707407670722593737772666973440977361243336397308051763091506836310795312607239520365290032105848839507981452307299417185715796297454995023505316040919859193718023307414880446217922800831766040938656344571034778553457121080530736394535923932651866030515041060966437313323672831539323500067937107541955437362433248361242525945868802353916766181532375855504886901432221349733n, 2n, 3n);

// this modulus is from the now-defunct "America Online Root Certification Authority 2" certificate
exports.Gaol = gen_RSA_group_obj(833287539555655830295437478623068715732893519470999001078575227726720833974299793327589892999446410695482689087817542178001025518000856645824542761860050201456988012423476797325416284135543115147497848693422016716844588890303978917861768153893481982002390666216248428266868192981018727094419599486404703564746373249295690184670845475555790369580007733124536111677885986700228007632811605375037348867111246742728259987286763650744497554590557328181022841922299670291568009554416925270309393290765959364224688474771305284758562184978264357696428875457896007139183128831260273238163285901042204479134355972621131905136584620604662058736669132342594748834225518170435481937761517048000372876190271778371991934048522521335509931794499153333036189250300411277900706695834937476478054354004604558199648562246970757390191511318015222081517956425652654710134304173256536041609721137081358431402394710892282816253447201619670765451884361947176326116403134771384774651137867814106943339025901079928519650268247936103502045262497449460438120483693210976009001793748449954988928005941680356289900003413781980827653292214516002118874375945551854673323131286257033477656922596627315766194604750898234659893295727170509283506976786630106108531865703n, 2n, 3n);

// class group, 1024-bit discriminant
exports.Ggoo1024 = gen_CG_group_obj(-56274201999185253089085184360489614464587875600149878584244396627532609037349612090400754567365855244937901931566175395708309079701360682759565279697244503974698875900562080663185314141329470374192565937999938483985541046278291016570306508184902225765396481128862669276234521449975232892841665242434137701527n);

// class group, 2048-bit discriminant
exports.Ggoo2048 = gen_CG_group_obj(-25847034201546780436474342804132278483696270887601946305801448178962948965302643193578313051153708440165586169446573111899545638276565225547370613926376202239986186394490817640433772010604479374729636877928340132492900126597741285585650417070732892578335460551215808711573626798728360522677447511895214001659196380148436581780985161666118027818353700314750304649102693217892523951160234688961921833921702015271727119994786036544348110728236000356810227691086994146439877828093383576478999943334939473373693932031913683006851237810106317060060670987149099666470644760334604393839712127685796326237126412086058517030651n);
